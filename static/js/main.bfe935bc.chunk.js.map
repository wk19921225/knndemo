{"version":3,"sources":["pages/EnhanceLearning/index.js","pages/App.js","serviceWorker.js","index.js"],"names":["testPrediction","startPrediction","training","NUM_CLASSES","TOPK","classes","EnhanceLearning","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bindPage","asyncToGenerator","regenerator_default","a","mark","_callee","wrap","_context","prev","next","knn","knnClassifier","mobilenetModule","mobilenet","sent","start","stop","timer","video","play","requestAnimationFrame","animate","bind","assertThisInitialized","pause","cancelAnimationFrame","_callee2","image","logits","infer","numClasses","res","i","exampleCount","_exampleCount","_i","_context2","videoPlaying","tf","fromPixels","addExample","getNumClasses","predictClass","getClassExampleCount","classIndex","console","log","controller","setState","defineProperty","concat","confidences","dispose","bindEvent","btnArr","document","getElementsByClassName","length","_loop","button","addEventListener","startTrain","startPredict","showPredict","bindKeyboardEvent","onkeydown","event","pointer","keyCode","PresSnakePoint","state","snakePoint","PreBlockPoint","blockPoint","headPoint","shift","push","indexOf","index","splice","unshift","currIndex","_","uniControl","smallBlockArr","keys","Array","from","map","item","id","parseInt","status","rightMessage","leftMessage","downMessage","upMessage","normalMessage","_this2","navigator","mediaDevices","getUserMedia","audio","then","stream","srcObject","width","height","command","_this3","_this$state","react_default","createElement","className","ref","node","autoPlay","playsInline","onClick","value","key","ClassNames","selected","block","React","Component","App","react_router_dom","react_router","path","component","Boolean","window","location","hostname","match","ReactDOM","render","pages_App","getElementById","serviceWorker","ready","registration","unregister"],"mappings":"0hBAQIA,WAAiB,GACjBC,GAAkB,EAClBC,GAAW,EACXC,EAAc,EAEdC,EAAO,GACPC,EAAU,CAAC,SAAU,QAAS,OAAQ,OAAQ,MAkXnCC,cA9WX,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACVC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAyCJI,SA1CcN,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KA0CH,SAAAC,IAAA,OAAAH,EAAAC,EAAAG,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACPhB,EAAKiB,IAAMC,MADJJ,EAAAE,KAAA,EAEgBG,MAFhB,OAEPnB,EAAKoB,UAFEN,EAAAO,KAIPrB,EAAKsB,QAJE,wBAAAR,EAAAS,SAAAX,MA1CGZ,EAiDdsB,MAAQ,WACAtB,EAAKwB,OACLxB,EAAKuB,OAETvB,EAAKyB,MAAMC,OACX1B,EAAKwB,MAAQG,sBAAsB3B,EAAK4B,QAAQC,KAAb5B,OAAA6B,EAAA,EAAA7B,CAAAD,MAtDzBA,EAyDduB,KAAO,WACHvB,EAAKyB,MAAMM,QACXC,qBAAqBhC,EAAKwB,QA3DhBxB,EA8Dd4B,QA9Dc3B,OAAAO,EAAA,EAAAP,CAAAQ,EAAAC,EAAAC,KA8DJ,SAAAsB,IAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAjC,EAAAC,EAAAG,KAAA,SAAA8B,GAAA,cAAAA,EAAA5B,KAAA4B,EAAA3B,MAAA,WACFhB,EAAK4C,aADH,CAAAD,EAAA3B,KAAA,YAEIkB,EAAQW,IAAWC,WAAW9C,EAAKyB,OAGnCW,EAAQ,kBAAMpC,EAAKoB,UAAUgB,MAAMF,EAAO,gBAE1B,GAAlBlC,EAAKL,WACLwC,EAASC,IACTpC,EAAKiB,IAAI8B,WAAWZ,EAAQnC,EAAKL,WAG/B0C,EAAarC,EAAKiB,IAAI+B,iBAExBvD,EAdF,CAAAkD,EAAA3B,KAAA,YAeErB,GAAW,IACP0C,EAAa,GAhBnB,CAAAM,EAAA3B,KAAA,gBAmBMmB,EAASC,IAnBfO,EAAA3B,KAAA,GAoBwBhB,EAAKiB,IAAIgC,aAAad,EAAQtC,GApBtD,QAsBM,IAFMyC,EApBZK,EAAAtB,KAsBekB,EAAI,EAAGA,EAAI3C,EAAa2C,IACvBC,EAAexC,EAAKiB,IAAIiC,uBAC1BZ,EAAIa,YAAcZ,GACd7C,IACA0D,QAAQC,IAAIrD,EAAKsD,YACjBtD,EAAKsD,WAAWxD,EAAQwC,EAAIa,cAKhCX,EAAaD,GAAK,GAClBvC,EAAKuD,SAALtD,OAAAuD,EAAA,EAAAvD,CAAA,MAAAwD,OACQ3D,EAAQyC,GADhB,cAAAkB,OACiCjB,EAAaD,GAD9C,UAAAkB,OACyE,IAArBnB,EAAIoB,YAAYnB,GADpE,OAjCd,QA0CF,GAAI5C,EAIA,IAFM6C,EAAexC,EAAKiB,IAAIiC,uBAErBX,EAAI,EAAGA,EAAI3C,EAAa2C,IAEzBC,EAAaD,GAAK,GAClBvC,EAAKuD,SAALtD,OAAAuD,EAAA,EAAAvD,CAAA,MAAAwD,OACQ3D,EAAQyC,GADhB,cAAAkB,OACiCjB,EAAaD,GAD9C,wBAUZL,EAAMyB,UACQ,MAAVxB,GACAA,EAAOwB,UA7DT,QAgEN3D,EAAKwB,MAAQG,sBAAsB3B,EAAK4B,QAAQC,KAAb5B,OAAA6B,EAAA,EAAA7B,CAAAD,KAhE7B,yBAAA2C,EAAApB,SAAAU,MA9DIjC,EAmMd4D,UAAY,WACR,IAAIC,EAASC,SAASC,uBAAuB,YAE7C,GAAKF,GAAWA,EAAOG,OAAvB,CAIAZ,QAAQC,IAAI,4BAEZ,IATc,IAAAY,EAAA,SASL1B,GACL,IAAI2B,EAASL,EAAOtB,GACpB2B,EAAOC,iBAAiB,YAAa,kBAAMnE,EAAKL,SAAW4C,IAC3D2B,EAAOC,iBAAiB,aAAc,kBAAMnE,EAAKL,SAAW4C,IAC5D2B,EAAOC,iBAAiB,UAAW,kBAAMnE,EAAKL,UAAY,IAC1DuE,EAAOC,iBAAiB,WAAY,kBAAMnE,EAAKL,UAAY,KALtD4C,EAAI,EAAGA,EAAIsB,EAAOG,OAAQzB,IAAK0B,EAA/B1B,KA5MCvC,EAqNdoE,WAAa,WACT3E,GAAiB,GAtNPO,EAyNdqE,aAAe,WACX3E,GAAkB,EAClBM,EAAKuD,SAAS,CACVe,aAAa,KA5NPtE,EAgOduE,kBAAoB,WAChBT,SAASU,UAAY,SAACC,GAClB,IAAIC,EAAU,GAEd,OADUD,EAAME,SAEZ,KAAK,GACDD,EAAU,OACV,MACJ,KAAK,GACDA,EAAU,OACV,MACJ,KAAK,GACDA,EAAU,MACV,MACJ,KAAK,GACDA,EAAU,QAIlBtB,QAAQC,IAAIqB,GAEZ,IAAIE,EAAiB5E,EAAK6E,MAAMC,WAC5BC,EAAgB/E,EAAK6E,MAAMG,WAC3BC,EAAYL,EAAeA,EAAeZ,OAAS,GACvD,OAAQU,GACJ,IAAK,OACDO,GAAW,GACX,MACJ,IAAK,MACDA,GAAW,GACX,MACJ,IAAK,OACDA,GAAW,EACX,MACJ,IAAK,QACDA,GAAW,EAWnB,GAPIA,EAAY,KAAOA,GAAa,IAEhCL,EAAeM,QACfN,EAAeO,KAAKF,GACpB7B,QAAQC,IAAIuB,KAGyB,IAAtCG,EAAcK,QAAQH,GAAmB,CACxC,IAAII,EAAQN,EAAcK,QAAQH,GAClCF,EAAcO,OAAOD,EAAO,GAC7BT,EAAeW,QAAQX,EAAe,GAAG,GAK5C5E,EAAKuD,SAAS,CACVuB,WAAYF,EACZY,UAAWP,KAInBjF,EAAKuD,SAAS,CACVe,aAAa,KA3RjBtE,EAAKL,UAAY,EACjBK,EAAK4C,cAAe,EAEpB5C,EAAKsD,WAAamC,WAAWzF,EAAK0F,WAAW7D,KAAhB5B,OAAA6B,EAAA,EAAA7B,CAAAD,IAA4B,KACzDoD,QAAQC,IAAIrD,EAAKsD,YACjBtD,EAAK6E,MAAQ,CACTW,UAAW,EACXV,WAAY,CAAC,EAAG,EAAG,GACnBE,WAAY,CAAC,EAAG,GAAI,GAAI,GAAI,IAC5BV,aAAa,EACbqB,cAAe1F,OAAO2F,KAAKC,MAAMC,KAAK,CAAC9B,OAAQ,OAAO+B,IAAI,SAAUC,GAChE,MAAO,CAACC,GAAIC,SAASF,GAAOG,QAAQ,KAExCC,aAAc,GACdC,YAAa,GACbC,YAAa,GACbC,UAAW,GACXC,cAAe,IAnBTxG,mFAuBM,IAAAyG,EAAAtG,KAChBuG,UAAUC,aAAaC,aAAa,CAACnF,OAAO,EAAMoF,OAAO,IACpDC,KAAK,SAACC,GACCN,EAAKhF,QACLgF,EAAKhF,MAAMuF,UAAYD,EACvBN,EAAKhF,MAAMwF,MAlCd,IAmCGR,EAAKhF,MAAMyF,OAnCd,IAqCGT,EAAKhF,MAAM0C,iBAAiB,UAAW,kBAAMsC,EAAK7D,cAAe,IACjE6D,EAAKhF,MAAM0C,iBAAiB,SAAU,kBAAMsC,EAAK7D,cAAe,OAI5EzC,KAAKyD,YACLzD,KAAKI,8CA6FE4G,GACP/D,QAAQC,IAAI8D,GACGhH,KAAK0E,MAAMW,UAC1B,OAAQ2B,GACJ,IAAK,QACW,EACZ,MACJ,IAAK,OACW,EACZ,MACJ,IAAK,OACW,GACZ,MACJ,IAAK,KACW,GACZ,MACA,IAAK,SACW,EAMxB,IAAIvC,EAAiBzE,KAAK0E,MAAMC,WAC5BC,EAAgB5E,KAAK0E,MAAMG,WAC3BC,EAAYL,EAAeA,EAAeZ,OAAS,GACvD,OAAQmD,GACJ,IAAK,OACDlC,GAAa,GACb,MACJ,IAAK,KACDA,GAAa,GACb,MACJ,IAAK,OACDA,GAAa,EACb,MACJ,IAAK,QACDA,GAAa,EACb,MACJ,IAAK,SACDA,GAAa,EAWrB,GAPIA,EAAY,KAAOA,GAAa,GAAgB,UAAXkC,IAErCvC,EAAeM,QACfN,EAAeO,KAAKF,GACpB7B,QAAQC,IAAIuB,KAGyB,IAAtCG,EAAcK,QAAQH,GAAmB,CACxC,IAAII,EAAQN,EAAcK,QAAQH,GAClCF,EAAcO,OAAOD,EAAO,GAC5BT,EAAeW,QAAQX,EAAe,GAAG,GAK7CzE,KAAKoD,SAAS,CACVuB,WAAYF,EACZY,UAAWP,qCAkGV,IAAAmC,EAAAjH,KAAAkH,EACoIlH,KAAK0E,MAAvIP,EADF+C,EACE/C,YAAaqB,EADf0B,EACe1B,cAAeS,EAD9BiB,EAC8BjB,aAAcC,EAD5CgB,EAC4ChB,YAAYG,EADxDa,EACwDb,cAAeF,EADvEe,EACuEf,YAAaC,EADpFc,EACoFd,UAAWf,EAD/F6B,EAC+F7B,UAAWV,EAD1GuC,EAC0GvC,WAAYE,EADtHqC,EACsHrC,WAC3H,OACIsC,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,WACXF,EAAA5G,EAAA6G,cAAA,sBACAD,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,mBACXF,EAAA5G,EAAA6G,cAAA,SAAOE,IAAK,SAACC,GACTN,EAAK3F,MAAQiG,GACdC,UAAQ,EAACC,aAAW,MAGtBtD,GACGgD,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,eACXF,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,mBACXF,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,kBACXF,EAAA5G,EAAA6G,cAAA,UAAQtB,GAAI,SAAUuB,UAAU,gBAAhC,gBACAF,EAAA5G,EAAA6G,cAAA,KAAGC,UAAU,WAAWhB,IAE5Bc,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,iBACXF,EAAA5G,EAAA6G,cAAA,UAAQtB,GAAI,QAASuB,UAAU,gBAA/B,gBACAF,EAAA5G,EAAA6G,cAAA,KAAGC,UAAU,WAAWpB,IAG5BkB,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,gBACXF,EAAA5G,EAAA6G,cAAA,UAAQtB,GAAI,OAAQuB,UAAU,gBAA9B,gBACAF,EAAA5G,EAAA6G,cAAA,KAAGC,UAAU,WAAWnB,IAG5BiB,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,gBACXF,EAAA5G,EAAA6G,cAAA,UAAQtB,GAAI,OAAQuB,UAAU,gBAA9B,gBACAF,EAAA5G,EAAA6G,cAAA,KAAGC,UAAU,WAAWlB,IAE5BgB,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,cACXF,EAAA5G,EAAA6G,cAAA,UAAQtB,GAAI,KAAMuB,UAAU,gBAA5B,gBACAF,EAAA5G,EAAA6G,cAAA,KAAGC,UAAU,WAAWjB,KAIhCe,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,qBACXF,EAAA5G,EAAA6G,cAAA,UAAQC,UAAU,YAAYK,QAAS,WACnCT,EAAKhD,eADT,gBAIAkD,EAAA5G,EAAA6G,cAAA,UAAQC,UAAU,YAAYK,QAAS,WACnCT,EAAK/C,iBADT,oBAUVC,GACEgD,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,iBACXF,EAAA5G,EAAA6G,cAAA,WAAM/B,GACN8B,EAAA5G,EAAA6G,cAAA,OAAKC,UAAU,WAEP7B,EAAcI,IACV,SAAC+B,GAAD,OAAWR,EAAA5G,EAAA6G,cAAA,OAAKQ,IAAKD,EAAM7B,GACXuB,UAAWQ,IAAW,CAAC,cAAe,CAClCC,UAA8C,IAAlCnD,EAAWM,QAAQ0C,EAAM7B,IACrCiC,OAA2C,IAAlClD,EAAWI,QAAQ0C,EAAM7B,qBAhWhEkC,IAAMC,WCErBC,mLAVP,OACIf,EAAA5G,EAAA6G,cAACe,EAAA,EAAD,KAEIhB,EAAA5G,EAAA6G,cAACgB,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAW1I,YAPzBoI,IAAMC,WCOJM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO1B,EAAA5G,EAAA6G,cAAC0B,EAAD,MAASnF,SAASoF,eAAe,SD2H3C,kBAAmBxC,WACrBA,UAAUyC,cAAcC,MAAMtC,KAAK,SAAAuC,GACjCA,EAAaC","file":"static/js/main.bfe935bc.chunk.js","sourcesContent":["import React from 'react';\nimport ClassNames from 'classnames';\nimport * as _ from 'lodash';\nimport * as mobilenetModule from '@tensorflow-models/mobilenet';\nimport * as tf from '@tensorflow/tfjs';\nimport * as knnClassifier from '@tensorflow-models/knn-classifier';\nimport './index.css';\n\nlet testPrediction = false;\nlet startPrediction = false;\nlet training = true;\nlet NUM_CLASSES = 5;\nlet IMAGE_SIZE = 300;\nlet TOPK = 10;\nlet classes = ['normal', 'right', 'left', 'down', 'up'];\nlet letterIndex = 0;\n\nclass EnhanceLearning extends React.Component {\n    constructor() {\n        super();\n        this.training = -1; // -1 when no class is being trained\n        this.videoPlaying = false;\n\n        this.controller = _.throttle(this.uniControl.bind(this), 1000);\n        console.log(this.controller)\n        this.state = {\n            currIndex: 2,\n            snakePoint: [0, 1, 2],\n            blockPoint: [9, 24, 95, 69, 52],\n            showPredict: false,\n            smallBlockArr: Object.keys(Array.from({length: 100})).map(function (item) {\n                return {id: parseInt(item), status: false};\n            }),\n            rightMessage: '',\n            leftMessage: '',\n            downMessage: '',\n            upMessage: '',\n            normalMessage: '',\n        }\n    }\n\n    componentDidMount() {\n        navigator.mediaDevices.getUserMedia({video: true, audio: false})\n            .then((stream) => {\n                if (this.video) {\n                    this.video.srcObject = stream;\n                    this.video.width = IMAGE_SIZE;\n                    this.video.height = IMAGE_SIZE;\n\n                    this.video.addEventListener('playing', () => this.videoPlaying = true);\n                    this.video.addEventListener('paused', () => this.videoPlaying = false);\n                }\n            })\n\n        this.bindEvent();\n        this.bindPage();\n        // this.bindKeyboardEvent()\n    }\n\n\n    bindPage = async () => {\n        this.knn = knnClassifier.create();\n        this.mobilenet = await mobilenetModule.load();\n\n        this.start();\n    };\n\n    start = () => {\n        if (this.timer) {\n            this.stop();\n        }\n        this.video.play();\n        this.timer = requestAnimationFrame(this.animate.bind(this));\n    };\n\n    stop = () => {\n        this.video.pause();\n        cancelAnimationFrame(this.timer);\n    };\n\n    animate = async () => {\n        if (this.videoPlaying) {\n            const image = tf.browser.fromPixels(this.video);\n\n            let logits;\n            const infer = () => this.mobilenet.infer(image, 'conv_preds');\n\n            if (this.training != -1) {\n                logits = infer();\n                this.knn.addExample(logits, this.training)\n            }\n\n            const numClasses = this.knn.getNumClasses();\n\n            if (testPrediction) {\n                training = false;\n                if (numClasses > 0) {\n\n                    // If classes have been added run predict\n                    logits = infer();\n                    const res = await this.knn.predictClass(logits, TOPK);\n\n                    for (let i = 0; i < NUM_CLASSES; i++) {\n                        const exampleCount = this.knn.getClassExampleCount();\n                        if (res.classIndex == i) {\n                            if (startPrediction) {\n                                console.log(this.controller)\n                                this.controller(classes[res.classIndex])\n                            }\n                        }\n\n                        // Update info text\n                        if (exampleCount[i] > 0) {\n                            this.setState({\n                                [`${classes[i]}Message`]: `${exampleCount[i]}：${res.confidences[i] * 100}%`,\n                            })\n                        }\n                    }\n                }\n            }\n\n\n            if (training) {\n                // The number of examples for each class\n                const exampleCount = this.knn.getClassExampleCount();\n\n                for (let i = 0; i < NUM_CLASSES; i++) {\n                    // Update info text\n                    if (exampleCount[i] > 0) {\n                        this.setState({\n                            [`${classes[i]}Message`]: `${exampleCount[i]}张样本`,\n                        })\n\n                    }\n                }\n            }\n\n\n            // Dispose image when done\n            image.dispose();\n            if (logits != null) {\n                logits.dispose();\n            }\n        }\n        this.timer = requestAnimationFrame(this.animate.bind(this));\n    }\n\n\n    uniControl(command) {\n        console.log(command)\n        let preIndex = this.state.currIndex;\n        switch (command) {\n            case 'right':\n                preIndex += 1;\n                break;\n            case 'left':\n                preIndex -= 1;\n                break;\n            case 'down':\n                preIndex += 10;\n                break;\n            case 'up':\n                preIndex -= 10;\n                break;\n                case 'normal':\n                    preIndex += 0;\n                break;\n        }\n\n\n\n        let PresSnakePoint = this.state.snakePoint;\n        let PreBlockPoint = this.state.blockPoint;\n        let headPoint = PresSnakePoint[PresSnakePoint.length - 1]\n        switch (command) {\n            case \"down\":\n                headPoint += 10;\n                break;\n            case \"up\":\n                headPoint -= 10;\n                break;\n            case \"left\":\n                headPoint -= 1;\n                break;\n            case \"right\":\n                headPoint += 1;\n                break;\n            case \"normal\":\n                headPoint += 0;\n                break;\n        }\n\n        if (headPoint < 100 && headPoint >= 0 && command != 'normal') {\n            // 去掉尾部\n            PresSnakePoint.shift();\n            PresSnakePoint.push(headPoint);\n            console.log(PresSnakePoint);\n        }\n\n        if(PreBlockPoint.indexOf(headPoint) !== -1) {\n            let index = PreBlockPoint.indexOf(headPoint)\n            PreBlockPoint.splice(index, 1)\n            PresSnakePoint.unshift(PresSnakePoint[0]-1)\n        }\n\n\n\n        this.setState({\n            snakePoint: PresSnakePoint,\n            currIndex: headPoint,\n        })\n    };\n\n    bindEvent = () => {\n        let btnArr = document.getElementsByClassName('trainBtn');\n\n        if (!btnArr && !btnArr.length) {\n            return;\n        }\n\n        console.log('绑定事件')\n\n        for (let i = 0; i < btnArr.length; i++) {\n            let button = btnArr[i];\n            button.addEventListener('mousedown', () => this.training = i);\n            button.addEventListener('touchstart', () => this.training = i);\n            button.addEventListener('mouseup', () => this.training = -1);\n            button.addEventListener('touchend', () => this.training = -1);\n        }\n    }\n\n    startTrain = () => {\n        testPrediction = true;\n    };\n\n    startPredict = () => {\n        startPrediction = true;\n        this.setState({\n            showPredict: true,\n        })\n    };\n\n    bindKeyboardEvent = () => {\n        document.onkeydown = (event) => {\n            let pointer = '';\n            let key = event.keyCode;\n            switch (key) {\n                case 40:\n                    pointer = 'down';\n                    break;\n                case 37:\n                    pointer = 'left';\n                    break;\n                case 38:\n                    pointer = 'top';\n                    break;\n                case 39:\n                    pointer = 'right';\n                    break;\n            }\n\n            console.log(pointer)\n\n            let PresSnakePoint = this.state.snakePoint;\n            let PreBlockPoint = this.state.blockPoint;\n            let headPoint = PresSnakePoint[PresSnakePoint.length - 1]\n            switch (pointer) {\n                case \"down\":\n                    headPoint+=10;\n                    break;\n                case \"top\":\n                    headPoint-=10;\n                    break;\n                case \"left\":\n                    headPoint-=1;\n                    break;\n                case \"right\":\n                    headPoint+=1;\n                    break;\n            }\n\n            if (headPoint < 100 && headPoint >= 0) {\n                // 去掉尾部\n                PresSnakePoint.shift();\n                PresSnakePoint.push(headPoint)\n                console.log(PresSnakePoint)\n            }\n\n            if(PreBlockPoint.indexOf(headPoint) !== -1) {\n                let index = PreBlockPoint.indexOf(headPoint)\n                PreBlockPoint.splice(index, 1)\n               PresSnakePoint.unshift(PresSnakePoint[0]-1)\n            }\n\n\n\n            this.setState({\n                snakePoint: PresSnakePoint,\n                currIndex: headPoint,\n            })\n        }\n\n        this.setState({\n            showPredict: true,\n        })\n    }\n\n    render() {\n        const {showPredict, smallBlockArr, rightMessage, leftMessage,normalMessage, downMessage, upMessage, currIndex, snakePoint, blockPoint} = this.state;\n        return (\n            <div className=\"enhance\">\n                <h6>knn demo</h6>\n                <div className=\"video-container\">\n                    <video ref={(node) => {\n                        this.video = node\n                    }} autoPlay playsInline></video>\n                </div>\n                {\n                    !showPredict && (\n                        <div className=\"train-block\">\n                            <div className=\"train-btn-group\">\n                                <div className=\"normal-content\">\n                                    <button id={'normal'} className=\"btn trainBtn\">正常</button>\n                                    <p className=\"message\">{normalMessage}</p>\n                                </div>\n                                <div className=\"right-content\">\n                                    <button id={'right'} className=\"btn trainBtn\">向右</button>\n                                    <p className=\"message\">{rightMessage}</p>\n                                </div>\n\n                                <div className=\"left-content\">\n                                    <button id={'left'} className=\"btn trainBtn\">向左</button>\n                                    <p className=\"message\">{leftMessage}</p>\n                                </div>\n\n                                <div className=\"down-content\">\n                                    <button id={'down'} className=\"btn trainBtn\">向下</button>\n                                    <p className=\"message\">{downMessage}</p>\n                                </div>\n                                <div className=\"up-content\">\n                                    <button id={'up'} className=\"btn trainBtn\">向上</button>\n                                    <p className=\"message\">{upMessage}</p>\n                                </div>\n                            </div>\n\n                            <div className=\"confirm-btn-group\">\n                                <button className=\"btn train\" onClick={() => {\n                                    this.startTrain();\n                                }}>训练\n                                </button>\n                                <button className=\"btn start\" onClick={() => {\n                                    this.startPredict();\n                                }}>开始\n                                </button>\n                            </div>\n                        </div>\n                    )\n                }\n\n                {\n                    !!showPredict && (\n                        <div className=\"predict-block\">\n                            <div>{currIndex}</div>\n                            <div className=\"predict\">\n                                {\n                                    smallBlockArr.map(\n                                        (value) => <div key={value.id}\n                                                        className={ClassNames([\"small-block\", {\n                                                            \"selected\": snakePoint.indexOf(value.id) !== -1,\n                                                            \"block\": blockPoint.indexOf(value.id) !== -1,\n                                                        }])}></div>)\n                                }\n                            </div>\n                        </div>\n                    )\n                }\n\n\n            </div>\n        )\n\n    }\n}\n\nexport default EnhanceLearning;","import React from 'react'\nimport { HashRouter as Router, Route } from 'react-router-dom'\n// import KnnDigital from './KnnDigital/App';\nimport EnhanceLearning from './EnhanceLearning';\n\nclass App extends React.Component{\n\n\n    render() {\n        return (\n            <Router>\n                {/*<Route exact path=\"/\" component={KnnDigital} />*/}\n                <Route path=\"/\" component={EnhanceLearning}></Route>\n\n            </Router>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './pages/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}